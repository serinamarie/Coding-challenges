# You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

# A string is called palindrome if is one that reads the same backward as well as forward.

 
class Solution:
    def removePalindromeSub(self, s: str) -> int:
        # input: str
        # output: num of steps as int
        # constraints: not an empty string, no longer than 1000 char, only a or b
        
        # if s is a palindrome
        if s == s[::-1]:
            return 1
            # return 1 because you can remove the entire string as it is a palindrome
            
        # if it is not a palindrome
            # return 2 because we can delete the a's and the b's
        else:
            return 2